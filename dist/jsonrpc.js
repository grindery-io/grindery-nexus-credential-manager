"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InvalidParamsError = void 0;
exports.createJsonRpcServer = createJsonRpcServer;

var _jsonRpc = require("json-rpc-2.0");

var _credentialManager = require("./credentialManager");

class InvalidParamsError extends Error {
  constructor(message) {
    super(message || "Invalid parameters");
  }

}

exports.InvalidParamsError = InvalidParamsError;

const exceptionMiddleware = async (next, request, serverParams) => {
  try {
    return await next(request, serverParams);
  } catch (error) {
    if (error instanceof InvalidParamsError) {
      return (0, _jsonRpc.createJSONRPCErrorResponse)(request.id, _jsonRpc.JSONRPCErrorCode.InvalidParams, error.message);
    } else {
      throw error;
    }
  }
};

function byPosition(func) {
  return async function (params) {
    if (!Array.isArray(params)) {
      throw new InvalidParamsError("Only positional parameters are supported");
    }

    return func(...params);
  };
}

function createJsonRpcServer() {
  const server = new _jsonRpc.JSONRPCServer();
  server.applyMiddleware(exceptionMiddleware);
  server.addMethod("cm_putConnectorSecrets", byPosition(_credentialManager.putConnectorSecrets));
  server.addMethod("cm_putAuthCredentials", byPosition(_credentialManager.putAuthCredentials));
  server.addMethod("cm_getAuthCredentialsDisplayInfo", byPosition(_credentialManager.getAuthCredentialsDisplayInfo));
  server.addMethod("cm_makeRequest", byPosition(_credentialManager.makeRequest));
  return server;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9qc29ucnBjLnRzIl0sIm5hbWVzIjpbIkludmFsaWRQYXJhbXNFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwiZXhjZXB0aW9uTWlkZGxld2FyZSIsIm5leHQiLCJyZXF1ZXN0Iiwic2VydmVyUGFyYW1zIiwiZXJyb3IiLCJpZCIsIkpTT05SUENFcnJvckNvZGUiLCJJbnZhbGlkUGFyYW1zIiwiYnlQb3NpdGlvbiIsImZ1bmMiLCJwYXJhbXMiLCJBcnJheSIsImlzQXJyYXkiLCJjcmVhdGVKc29uUnBjU2VydmVyIiwic2VydmVyIiwiSlNPTlJQQ1NlcnZlciIsImFwcGx5TWlkZGxld2FyZSIsImFkZE1ldGhvZCIsInB1dENvbm5lY3RvclNlY3JldHMiLCJwdXRBdXRoQ3JlZGVudGlhbHMiLCJnZXRBdXRoQ3JlZGVudGlhbHNEaXNwbGF5SW5mbyIsIm1ha2VSZXF1ZXN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztBQUNBOztBQUVPLE1BQU1BLGtCQUFOLFNBQWlDQyxLQUFqQyxDQUF1QztBQUM1Q0MsRUFBQUEsV0FBVyxDQUFDQyxPQUFELEVBQW1CO0FBQzVCLFVBQU1BLE9BQU8sSUFBSSxvQkFBakI7QUFDRDs7QUFIMkM7Ozs7QUFLOUMsTUFBTUMsbUJBQW1CLEdBQUcsT0FBT0MsSUFBUCxFQUFhQyxPQUFiLEVBQXNCQyxZQUF0QixLQUF1QztBQUNqRSxNQUFJO0FBQ0YsV0FBTyxNQUFNRixJQUFJLENBQUNDLE9BQUQsRUFBVUMsWUFBVixDQUFqQjtBQUNELEdBRkQsQ0FFRSxPQUFPQyxLQUFQLEVBQWM7QUFDZCxRQUFJQSxLQUFLLFlBQVlSLGtCQUFyQixFQUF5QztBQUN2QyxhQUFPLHlDQUEyQk0sT0FBTyxDQUFDRyxFQUFuQyxFQUF1Q0MsMEJBQWlCQyxhQUF4RCxFQUF1RUgsS0FBSyxDQUFDTCxPQUE3RSxDQUFQO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsWUFBTUssS0FBTjtBQUNEO0FBQ0Y7QUFDRixDQVZEOztBQVdBLFNBQVNJLFVBQVQsQ0FBb0JDLElBQXBCLEVBQTBCO0FBQ3hCLFNBQU8sZ0JBQWdCQyxNQUFoQixFQUE0RDtBQUNqRSxRQUFJLENBQUNDLEtBQUssQ0FBQ0MsT0FBTixDQUFjRixNQUFkLENBQUwsRUFBNEI7QUFDMUIsWUFBTSxJQUFJZCxrQkFBSixDQUF1QiwwQ0FBdkIsQ0FBTjtBQUNEOztBQUNELFdBQU9hLElBQUksQ0FBQyxHQUFHQyxNQUFKLENBQVg7QUFDRCxHQUxEO0FBTUQ7O0FBQ00sU0FBU0csbUJBQVQsR0FBK0I7QUFDcEMsUUFBTUMsTUFBTSxHQUFHLElBQUlDLHNCQUFKLEVBQWY7QUFDQUQsRUFBQUEsTUFBTSxDQUFDRSxlQUFQLENBQXVCaEIsbUJBQXZCO0FBQ0FjLEVBQUFBLE1BQU0sQ0FBQ0csU0FBUCxDQUFpQix3QkFBakIsRUFBMkNULFVBQVUsQ0FBQ1Usc0NBQUQsQ0FBckQ7QUFDQUosRUFBQUEsTUFBTSxDQUFDRyxTQUFQLENBQWlCLHVCQUFqQixFQUEwQ1QsVUFBVSxDQUFDVyxxQ0FBRCxDQUFwRDtBQUNBTCxFQUFBQSxNQUFNLENBQUNHLFNBQVAsQ0FBaUIsa0NBQWpCLEVBQXFEVCxVQUFVLENBQUNZLGdEQUFELENBQS9EO0FBQ0FOLEVBQUFBLE1BQU0sQ0FBQ0csU0FBUCxDQUFpQixnQkFBakIsRUFBbUNULFVBQVUsQ0FBQ2EsOEJBQUQsQ0FBN0M7QUFDQSxTQUFPUCxNQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVKU09OUlBDRXJyb3JSZXNwb25zZSwgSlNPTlJQQ0Vycm9yQ29kZSwgSlNPTlJQQ1BhcmFtcywgSlNPTlJQQ1NlcnZlciB9IGZyb20gXCJqc29uLXJwYy0yLjBcIjtcbmltcG9ydCB7IGdldEF1dGhDcmVkZW50aWFsc0Rpc3BsYXlJbmZvLCBtYWtlUmVxdWVzdCwgcHV0QXV0aENyZWRlbnRpYWxzLCBwdXRDb25uZWN0b3JTZWNyZXRzIH0gZnJvbSBcIi4vY3JlZGVudGlhbE1hbmFnZXJcIjtcblxuZXhwb3J0IGNsYXNzIEludmFsaWRQYXJhbXNFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZT86IHN0cmluZykge1xuICAgIHN1cGVyKG1lc3NhZ2UgfHwgXCJJbnZhbGlkIHBhcmFtZXRlcnNcIik7XG4gIH1cbn1cbmNvbnN0IGV4Y2VwdGlvbk1pZGRsZXdhcmUgPSBhc3luYyAobmV4dCwgcmVxdWVzdCwgc2VydmVyUGFyYW1zKSA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IG5leHQocmVxdWVzdCwgc2VydmVyUGFyYW1zKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBJbnZhbGlkUGFyYW1zRXJyb3IpIHtcbiAgICAgIHJldHVybiBjcmVhdGVKU09OUlBDRXJyb3JSZXNwb25zZShyZXF1ZXN0LmlkLCBKU09OUlBDRXJyb3JDb2RlLkludmFsaWRQYXJhbXMsIGVycm9yLm1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cbn07XG5mdW5jdGlvbiBieVBvc2l0aW9uKGZ1bmMpIHtcbiAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uIChwYXJhbXM6IFBhcnRpYWw8SlNPTlJQQ1BhcmFtcz4gfCB1bmRlZmluZWQpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocGFyYW1zKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRQYXJhbXNFcnJvcihcIk9ubHkgcG9zaXRpb25hbCBwYXJhbWV0ZXJzIGFyZSBzdXBwb3J0ZWRcIik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jKC4uLnBhcmFtcyk7XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSnNvblJwY1NlcnZlcigpIHtcbiAgY29uc3Qgc2VydmVyID0gbmV3IEpTT05SUENTZXJ2ZXIoKTtcbiAgc2VydmVyLmFwcGx5TWlkZGxld2FyZShleGNlcHRpb25NaWRkbGV3YXJlKTtcbiAgc2VydmVyLmFkZE1ldGhvZChcImNtX3B1dENvbm5lY3RvclNlY3JldHNcIiwgYnlQb3NpdGlvbihwdXRDb25uZWN0b3JTZWNyZXRzKSk7XG4gIHNlcnZlci5hZGRNZXRob2QoXCJjbV9wdXRBdXRoQ3JlZGVudGlhbHNcIiwgYnlQb3NpdGlvbihwdXRBdXRoQ3JlZGVudGlhbHMpKTtcbiAgc2VydmVyLmFkZE1ldGhvZChcImNtX2dldEF1dGhDcmVkZW50aWFsc0Rpc3BsYXlJbmZvXCIsIGJ5UG9zaXRpb24oZ2V0QXV0aENyZWRlbnRpYWxzRGlzcGxheUluZm8pKTtcbiAgc2VydmVyLmFkZE1ldGhvZChcImNtX21ha2VSZXF1ZXN0XCIsIGJ5UG9zaXRpb24obWFrZVJlcXVlc3QpKTtcbiAgcmV0dXJuIHNlcnZlcjtcbn1cbiJdfQ==