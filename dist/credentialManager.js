"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAuthCredentialsDisplayInfo = getAuthCredentialsDisplayInfo;
exports.makeRequest = makeRequest;
exports.putAuthCredentials = putAuthCredentials;
exports.putConnectorSecrets = putConnectorSecrets;

var _jsonrpc = require("./jsonrpc");

var _db = require("./db");

function verifyDid(did) {
  if (typeof did !== "string" || !/^did:[^:]+:.+$/.test(did)) {
    throw new _jsonrpc.InvalidParamsError("Invalid DID");
  }
}

function verifyConnectorId(connectorId) {
  if (typeof connectorId !== "string" || !/^[a-zA-Z0-9-_]+$/.test(connectorId)) {
    throw new _jsonrpc.InvalidParamsError("Invalid connector ID");
  }
}

function verifyRequestSchema(request) {
  var _request$method;

  if (typeof request !== "object") {
    throw new _jsonrpc.InvalidParamsError("Invalid request schema");
  }

  if (request.method !== undefined && typeof request.method !== "string") {
    throw new _jsonrpc.InvalidParamsError("Invalid request method");
  }

  if (!request.url || typeof request.url !== "string") {
    throw new _jsonrpc.InvalidParamsError("Invalid request URL");
  }

  if (request.body !== undefined && typeof request.body !== "string" && typeof request.body !== "object") {
    throw new _jsonrpc.InvalidParamsError("Invalid request body");
  }

  if (request.params !== undefined && typeof request.params !== "object") {
    throw new _jsonrpc.InvalidParamsError("Invalid request params");
  }

  if (request.headers !== undefined && typeof request.headers !== "object") {
    throw new _jsonrpc.InvalidParamsError("Invalid request headers");
  }

  if (request.auth !== undefined && typeof request.auth !== "object") {
    throw new _jsonrpc.InvalidParamsError("Invalid request auth");
  }

  const method = ((_request$method = request.method) === null || _request$method === void 0 ? void 0 : _request$method.toString().toUpperCase()) ?? "GET";

  if (["GET", "HEAD"].includes(method) && request.body) {
    throw new _jsonrpc.InvalidParamsError("Invalid body for GET/HEAD request");
  }
}

async function putConnectorSecrets(connectorId, secrets) {
  verifyConnectorId(connectorId);

  if (typeof secrets !== "object") {
    throw new _jsonrpc.InvalidParamsError("Invalid secrets");
  }

  const collection = await (0, _db.getCollection)("connectorSecrets");
  await collection.replaceOne({
    connectorId
  }, {
    connectorId,
    secrets: JSON.stringify(secrets),
    updatedAt: Date.now()
  }, {
    upsert: true
  });
}

async function putAuthCredentials(connectorId, userDid, authCredentials, displayName) {
  verifyConnectorId(connectorId);
  verifyDid(userDid);

  if (typeof authCredentials !== "object") {
    throw new _jsonrpc.InvalidParamsError("Invalid auth credentials");
  }

  if ("url" in authCredentials) {
    verifyRequestSchema(authCredentials);
  }

  if (typeof displayName !== "string" || !displayName) {
    throw new _jsonrpc.InvalidParamsError("Invalid display name");
  }

  const collection = await (0, _db.getCollection)("authCredentials");
  const existingDoc = await collection.findOne({
    connectorId,
    userDid
  });
  const result = await collection.replaceOne({
    connectorId,
    userDid
  }, {
    connectorId,
    userDid,
    authCredentials: JSON.stringify(authCredentials),
    displayName,
    updatedAt: Date.now(),
    createdAt: (existingDoc === null || existingDoc === void 0 ? void 0 : existingDoc.createdAt) ?? Date.now()
  }, {
    upsert: true
  });
  return result.upsertedId.toString();
}

async function getAuthCredentialsDisplayInfo(connectorId, userDid) {
  verifyConnectorId(connectorId);
  verifyDid(userDid);
  const collection = await (0, _db.getCollection)("authCredentials");
  const docs = await collection.find({
    connectorId,
    userDid
  }).toArray();
  return docs.map(doc => {
    var _doc$displayName;

    return {
      id: doc._id.toString(),
      name: ((_doc$displayName = doc.displayName) === null || _doc$displayName === void 0 ? void 0 : _doc$displayName.toString()) || "<unknown>",
      createdAt: new Date(doc.createdAt).toISOString()
    };
  });
}

async function makeRequest(connectorId, userDid, request) {
  verifyConnectorId(connectorId);
  verifyDid(userDid);

  if (!request.url) {
    throw new _jsonrpc.InvalidParamsError("Invalid URL");
  }

  const collection = await (0, _db.getCollection)("authCredentials");
  const doc = await collection.findOne({
    connectorId,
    userDid
  });
  throw new Error("Not implemented");
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,