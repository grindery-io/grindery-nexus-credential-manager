"use strict";

require("core-js");

require("dotenv/config");

var Sentry = _interopRequireWildcard(require("@sentry/node"));

var _util = _interopRequireDefault(require("util"));

var _app = require("./app");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

Sentry.init();
const env = process.env;

async function handleHttp(req, res) {
  if ("CORS_ENABLED" in env && env.CORS_ENABLED) {
    res.set({
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Methods": "POST, OPTIONS",
      "Access-Control-Allow-Headers": "Content-Type",
      "Access-Control-Max-Age": "86400"
    });
  }

  if (req.method === "OPTIONS") {
    return res.status(206).end();
  }

  if (req.method !== "POST") {
    return res.status(405).send("Method Not Allowed");
  }

  const rawBody = req.body;

  if (Buffer.isBuffer(req.body)) {
    try {
      req.body = req.body.toString("utf-8");
    } catch (e) {
      return res.status(415).send("Unsupported Media Type (Not UTF-8)");
    }
  }

  if (typeof req.body === "string") {
    try {
      req.body = JSON.parse(req.body);
    } catch (e) {
      return res.status(415).send("Unsupported Media Type");
    }
  }

  if (!req.body) {
    return res.status(400).send("Bad request");
  }

  req.query = req.query || {};

  if ("INVOKE_KEY" in env && (req.body.key || req.query.key) !== env.INVOKE_KEY && !req.originalUrl.endsWith("/" + env.INVOKE_KEY)) {
    return res.status(403).send("Forbidden");
  }

  if ("INVOKE_KEY" in env) {
    delete req.body.key;
  }

  const result = await (0, _app.main)(req.body, {
    eventType: "http",
    req,
    rawBody
  });

  if (result && result.sendResponse) {
    return result.sendResponse(res);
  }

  res.status(200).json(result);
}

function createHttpHandler() {
  const handleRequest = Sentry.Handlers.requestHandler({
    flushTimeout: 3000
  });
  const handleError = Sentry.Handlers.errorHandler({
    shouldHandleError: () => true
  });
  return (req, res) => handleRequest(req, res, () => {
    handleHttp(req, res).catch(e => {
      if (e.response) {
        var _e$response$request, _e$request, _e$response$request2, _e$response$request2$, _e$request2, _e$request2$uri;

        console.error(JSON.stringify({
          statusCode: e.statusCode || e.response.status || e.response.statusCode || e.code,
          method: ((_e$response$request = e.response.request) === null || _e$response$request === void 0 ? void 0 : _e$response$request.method) || ((_e$request = e.request) === null || _e$request === void 0 ? void 0 : _e$request.method),
          url: ((_e$response$request2 = e.response.request) === null || _e$response$request2 === void 0 ? void 0 : (_e$response$request2$ = _e$response$request2.uri) === null || _e$response$request2$ === void 0 ? void 0 : _e$response$request2$.href) || ((_e$request2 = e.request) === null || _e$request2 === void 0 ? void 0 : (_e$request2$uri = _e$request2.uri) === null || _e$request2$uri === void 0 ? void 0 : _e$request2$uri.href),
          body: e.response.body || e.response.data
        }));
        e = e.response.body || e.response.data || e;
      } else {
        console.error(e);
      }

      if (!(e instanceof Error)) {
        const err = new Error(e.message || _util.default.inspect(e, {
          depth: 1
        }));
        Sentry.configureScope(scope => {
          scope.setContext("rawErrorText", Object.fromEntries(Object.keys(e).map(key => [key, _util.default.inspect(e[key], {
            depth: 10
          })])));

          try {
            JSON.stringify(e);
            scope.setContext("rawError", e);
          } catch (_) {// Ignore
          }

          e = err;
        });
      }

      handleError(e, req, res, () => {
        Sentry.flush(2000).then(() => {
          if (!res.headersSent) {
            res.status(500).send("Internal server error");
          }
        });
      });
    });
  });
}

async function cliMain() {
  return await (0, _app.main)({
    jsonrpc: "2.0",
    method: process.argv[2],
    params: JSON.parse(process.argv[3] || "[]"),
    id: 1
  });
} // Google Cloud Functions support


const FUNCTION_NAME = process.env.FUNCTION_TARGET || process.env.FUNCTION_NAME || process.env.npm_package_name;
exports["http"] = createHttpHandler();
exports[FUNCTION_NAME] = exports["http"];
exports["main"] = cliMain; // vim: sw=2:ts=2:expandtab:fdm=syntax
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJTZW50cnkiLCJpbml0IiwiZW52IiwicHJvY2VzcyIsImhhbmRsZUh0dHAiLCJyZXEiLCJyZXMiLCJDT1JTX0VOQUJMRUQiLCJzZXQiLCJtZXRob2QiLCJzdGF0dXMiLCJlbmQiLCJzZW5kIiwicmF3Qm9keSIsImJvZHkiLCJCdWZmZXIiLCJpc0J1ZmZlciIsInRvU3RyaW5nIiwiZSIsIkpTT04iLCJwYXJzZSIsInF1ZXJ5Iiwia2V5IiwiSU5WT0tFX0tFWSIsIm9yaWdpbmFsVXJsIiwiZW5kc1dpdGgiLCJyZXN1bHQiLCJldmVudFR5cGUiLCJzZW5kUmVzcG9uc2UiLCJqc29uIiwiY3JlYXRlSHR0cEhhbmRsZXIiLCJoYW5kbGVSZXF1ZXN0IiwiSGFuZGxlcnMiLCJyZXF1ZXN0SGFuZGxlciIsImZsdXNoVGltZW91dCIsImhhbmRsZUVycm9yIiwiZXJyb3JIYW5kbGVyIiwic2hvdWxkSGFuZGxlRXJyb3IiLCJjYXRjaCIsInJlc3BvbnNlIiwiY29uc29sZSIsImVycm9yIiwic3RyaW5naWZ5Iiwic3RhdHVzQ29kZSIsImNvZGUiLCJyZXF1ZXN0IiwidXJsIiwidXJpIiwiaHJlZiIsImRhdGEiLCJFcnJvciIsImVyciIsIm1lc3NhZ2UiLCJ1dGlsIiwiaW5zcGVjdCIsImRlcHRoIiwiY29uZmlndXJlU2NvcGUiLCJzY29wZSIsInNldENvbnRleHQiLCJPYmplY3QiLCJmcm9tRW50cmllcyIsImtleXMiLCJtYXAiLCJfIiwiZmx1c2giLCJ0aGVuIiwiaGVhZGVyc1NlbnQiLCJjbGlNYWluIiwianNvbnJwYyIsImFyZ3YiLCJwYXJhbXMiLCJpZCIsIkZVTkNUSU9OX05BTUUiLCJGVU5DVElPTl9UQVJHRVQiLCJucG1fcGFja2FnZV9uYW1lIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFJQTs7Ozs7Ozs7QUFGQUEsTUFBTSxDQUFDQyxJQUFQO0FBSUEsTUFBTUMs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QUFDQUEsT0FBTyxDQUFDLE1BQUQsQ0FBUCxHQUFrQlIsT0FBbEIsQyxDQUVBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiY29yZS1qc1wiO1xuaW1wb3J0IFwiZG90ZW52L2NvbmZpZ1wiO1xuaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gXCJAc2VudHJ5L25vZGVcIjtcbmltcG9ydCB1dGlsIGZyb20gXCJ1dGlsXCI7XG5cblNlbnRyeS5pbml0KCk7XG5cbmltcG9ydCB7IG1haW4gfSBmcm9tIFwiLi9hcHBcIjtcblxuY29uc3QgZW52ID0gcHJvY2Vzcy5lbnY7XG5cbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUh0dHAocmVxLCByZXMpIHtcbiAgaWYgKFwiQ09SU19FTkFCTEVEXCIgaW4gZW52ICYmIGVudi5DT1JTX0VOQUJMRUQpIHtcbiAgICByZXMuc2V0KHtcbiAgICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luXCI6IFwiKlwiLFxuICAgICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1NZXRob2RzXCI6IFwiUE9TVCwgT1BUSU9OU1wiLFxuICAgICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzXCI6IFwiQ29udGVudC1UeXBlXCIsXG4gICAgICBcIkFjY2Vzcy1Db250cm9sLU1heC1BZ2VcIjogXCI4NjQwMFwiLFxuICAgIH0pO1xuICB9XG4gIGlmIChyZXEubWV0aG9kID09PSBcIk9QVElPTlNcIikge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDIwNikuZW5kKCk7XG4gIH1cbiAgaWYgKHJlcS5tZXRob2QgIT09IFwiUE9TVFwiKSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA1KS5zZW5kKFwiTWV0aG9kIE5vdCBBbGxvd2VkXCIpO1xuICB9XG4gIGNvbnN0IHJhd0JvZHkgPSByZXEuYm9keTtcblxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHJlcS5ib2R5KSkge1xuICAgIHRyeSB7XG4gICAgICByZXEuYm9keSA9IHJlcS5ib2R5LnRvU3RyaW5nKFwidXRmLThcIik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDE1KS5zZW5kKFwiVW5zdXBwb3J0ZWQgTWVkaWEgVHlwZSAoTm90IFVURi04KVwiKTtcbiAgICB9XG4gIH1cbiAgaWYgKHR5cGVvZiByZXEuYm9keSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHRyeSB7XG4gICAgICByZXEuYm9keSA9IEpTT04ucGFyc2UocmVxLmJvZHkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQxNSkuc2VuZChcIlVuc3VwcG9ydGVkIE1lZGlhIFR5cGVcIik7XG4gICAgfVxuICB9XG4gIGlmICghcmVxLmJvZHkpIHtcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLnNlbmQoXCJCYWQgcmVxdWVzdFwiKTtcbiAgfVxuICByZXEucXVlcnkgPSByZXEucXVlcnkgfHwge307XG4gIGlmIChcbiAgICBcIklOVk9LRV9LRVlcIiBpbiBlbnYgJiZcbiAgICAocmVxLmJvZHkua2V5IHx8IHJlcS5xdWVyeS5rZXkpICE9PSBlbnYuSU5WT0tFX0tFWSAmJlxuICAgICFyZXEub3JpZ2luYWxVcmwuZW5kc1dpdGgoXCIvXCIgKyBlbnYuSU5WT0tFX0tFWSlcbiAgKSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5zZW5kKFwiRm9yYmlkZGVuXCIpO1xuICB9XG4gIGlmIChcIklOVk9LRV9LRVlcIiBpbiBlbnYpIHtcbiAgICBkZWxldGUgcmVxLmJvZHkua2V5O1xuICB9XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG1haW4ocmVxLmJvZHksIHsgZXZlbnRUeXBlOiBcImh0dHBcIiwgcmVxLCByYXdCb2R5IH0pO1xuICBpZiAocmVzdWx0ICYmIHJlc3VsdC5zZW5kUmVzcG9uc2UpIHtcbiAgICByZXR1cm4gcmVzdWx0LnNlbmRSZXNwb25zZShyZXMpO1xuICB9XG4gIHJlcy5zdGF0dXMoMjAwKS5qc29uKHJlc3VsdCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUh0dHBIYW5kbGVyKCkge1xuICBjb25zdCBoYW5kbGVSZXF1ZXN0ID0gU2VudHJ5LkhhbmRsZXJzLnJlcXVlc3RIYW5kbGVyKHsgZmx1c2hUaW1lb3V0OiAzMDAwIH0pO1xuICBjb25zdCBoYW5kbGVFcnJvciA9IFNlbnRyeS5IYW5kbGVycy5lcnJvckhhbmRsZXIoeyBzaG91bGRIYW5kbGVFcnJvcjogKCkgPT4gdHJ1ZSB9KTtcbiAgcmV0dXJuIChyZXEsIHJlcykgPT5cbiAgICBoYW5kbGVSZXF1ZXN0KHJlcSwgcmVzLCAoKSA9PiB7XG4gICAgICBoYW5kbGVIdHRwKHJlcSwgcmVzKS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICBpZiAoZS5yZXNwb25zZSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgIHN0YXR1c0NvZGU6IGUuc3RhdHVzQ29kZSB8fCBlLnJlc3BvbnNlLnN0YXR1cyB8fCBlLnJlc3BvbnNlLnN0YXR1c0NvZGUgfHwgZS5jb2RlLFxuICAgICAgICAgICAgICBtZXRob2Q6IGUucmVzcG9uc2UucmVxdWVzdD8ubWV0aG9kIHx8IGUucmVxdWVzdD8ubWV0aG9kLFxuICAgICAgICAgICAgICB1cmw6IGUucmVzcG9uc2UucmVxdWVzdD8udXJpPy5ocmVmIHx8IGUucmVxdWVzdD8udXJpPy5ocmVmLFxuICAgICAgICAgICAgICBib2R5OiBlLnJlc3BvbnNlLmJvZHkgfHwgZS5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgICAgIGUgPSBlLnJlc3BvbnNlLmJvZHkgfHwgZS5yZXNwb25zZS5kYXRhIHx8IGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShlIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKGUubWVzc2FnZSB8fCB1dGlsLmluc3BlY3QoZSwgeyBkZXB0aDogMSB9KSk7XG4gICAgICAgICAgU2VudHJ5LmNvbmZpZ3VyZVNjb3BlKChzY29wZSkgPT4ge1xuICAgICAgICAgICAgc2NvcGUuc2V0Q29udGV4dChcbiAgICAgICAgICAgICAgXCJyYXdFcnJvclRleHRcIixcbiAgICAgICAgICAgICAgT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5rZXlzKGUpLm1hcCgoa2V5KSA9PiBba2V5LCB1dGlsLmluc3BlY3QoZVtrZXldLCB7IGRlcHRoOiAxMCB9KV0pKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGUpO1xuICAgICAgICAgICAgICBzY29wZS5zZXRDb250ZXh0KFwicmF3RXJyb3JcIiwgZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgICAgICAgIC8vIElnbm9yZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZSA9IGVycjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBoYW5kbGVFcnJvcihlLCByZXEsIHJlcywgKCkgPT4ge1xuICAgICAgICAgIFNlbnRyeS5mbHVzaCgyMDAwKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghcmVzLmhlYWRlcnNTZW50KSB7XG4gICAgICAgICAgICAgIHJlcy5zdGF0dXMoNTAwKS5zZW5kKFwiSW50ZXJuYWwgc2VydmVyIGVycm9yXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjbGlNYWluKCkge1xuICByZXR1cm4gYXdhaXQgbWFpbih7IGpzb25ycGM6IFwiMi4wXCIsIG1ldGhvZDogcHJvY2Vzcy5hcmd2WzJdLCBwYXJhbXM6IEpTT04ucGFyc2UocHJvY2Vzcy5hcmd2WzNdIHx8IFwiW11cIiksIGlkOiAxIH0pO1xufVxuXG4vLyBHb29nbGUgQ2xvdWQgRnVuY3Rpb25zIHN1cHBvcnRcbmNvbnN0IEZVTkNUSU9OX05BTUUgPSBwcm9jZXNzLmVudi5GVU5DVElPTl9UQVJHRVQgfHwgcHJvY2Vzcy5lbnYuRlVOQ1RJT05fTkFNRSB8fCBwcm9jZXNzLmVudi5ucG1fcGFja2FnZV9uYW1lO1xuXG5leHBvcnRzW1wiaHR0cFwiXSA9IGNyZWF0ZUh0dHBIYW5kbGVyKCk7XG5leHBvcnRzW0ZVTkNUSU9OX05BTUVdID0gZXhwb3J0c1tcImh0dHBcIl07XG5leHBvcnRzW1wibWFpblwiXSA9IGNsaU1haW47XG5cbi8vIHZpbTogc3c9Mjp0cz0yOmV4cGFuZHRhYjpmZG09c3ludGF4XG4iXX0=